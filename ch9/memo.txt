リスト

空りすと []

a :: b :: c :: [] と [a;b;c] は同じ


リストは再帰構造となるため、リストに関わる処理も再帰的

誤って無限ループしてしまうと。。。
test1 まで完了 test2 以降が実行されていないように見える
=> test2を計算するのに延々再帰しているため結果がでない
command C で中断できる
Stack overflow during evaluation で止まることも。。。



デザインレシピ

コメントの(* sum rest *) は
再帰をするにあたり、
引数のlst よりも要素が少ない rest を使うことで
停止性を保証している　ことを明示する　という意味。


q9.6

concat ["春” ; ”夏"]  がうまくいかなかった
["春” ; ”夏"] を、"春” ; ”夏" という1つの文字列を要素にもつりすと　と扱われる。
"春” :: ”夏" :: [] と書くと通る

記号の半角・全角のちがい？



let res3 = concat ["春” ; ”夏"] // "春” ; ”夏"


let sampl2 =  match ["春” ; ”夏"] with   // "春” ; ”夏" 
   [] -> ""
|  first :: rest -> first

let sampl3 = match ["春” ; ”夏"] with   // []
    [] -> []
|   first :: rest -> rest




	